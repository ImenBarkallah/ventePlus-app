package org.ms.gatewayservice.config;


import org.ms.gatewayservice.filters.AuthenticationFilter;
import org.springframework.cloud.gateway.route.RouteLocator;
import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class GatewayConfig {

    private final AuthenticationFilter authenticationFilter;

    public GatewayConfig(AuthenticationFilter authenticationFilter) {
        this.authenticationFilter = authenticationFilter;
    }

    @Bean
    public RouteLocator customRoutes(RouteLocatorBuilder builder) {
        return builder.routes()
            .route("produit-service", r -> r.path("/produits/**")
                .filters(f -> f.filter(authenticationFilter))
                .uri("lb://produitservice"))
            .route("client-service", r -> r.path("/clients/**")
                .filters(f -> f.filter(authenticationFilter))
                .uri("lb://client-service"))
            .route("categorie-service", r -> r.path("/categories/**")
                .filters(f -> f.filter(authenticationFilter))
                .uri("lb://categorie-service"))
            .route("facture-service", r -> r.path("/factures/**")
                .filters(f -> f.filter(authenticationFilter))
                .uri("lb://factureservice"))
            .route("devis-service", r -> r.path("/devis/**")
                .filters(f -> f.filter(authenticationFilter))
                .uri("lb://devis-service"))
            .route("reglement-service", r -> r.path("/reglements/**")
                .filters(f -> f.filter(authenticationFilter))
                .uri("lb://reglement-service"))
            .build();
    }
}
